<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    use HasFactory;

    //guarded ou fillable para controlar adicionar posts
    //protected $guarded = ['id'];
    //protected $guarded = [];//melhor opção, array vazio, id é AUTO_INCREMENT
    //protected  $fillable =

    protected $with = ['category', 'author'];

///////////////////////////////////////////////////////////////////
    public function scopeFilter($query, array $filters)// Post::newQuery()->filter()
    {
        //$query->where
        //if(request('search')){
        //if($filters['search'] ?? false){
                //query com wildcars % query like de pesquisa

            //$query->when($filters['search'] ?? false, function ($query, $search){
            $query->when($filters['search'] ?? false, fn ($query, $search) => 
              $query->where(fn($query) => 
                $query->where('title','like','%'.$search.'%')
                ->orWhere('body','like','%'.$search.'%')) );

            $query->when($filters['category'] ?? false, fn ($query, $category) => 
            //   $query
            //     ->whereExists(fn($query) => 
            //         $query->from('categories')
            //               ->whereColumn ('categories.id', 'posts.category_id')
            //               ->where('categories.slug', $category)) 
            //             );
                $query
                    ->whereHas('category', fn($query) => 
                    $query->where('slug', $category)));

           // };//POST Q DEVOLVEM OS QUE TÊM A CATEGORY QUE CORRESPONDE NA SLUG DA CATEGORY
           //SELECT * FROM `posts` WHERE EXISTS (SELECT * FROM `categories` WHERE `categories`.`id` = 'posts.category_id' and `categories`.`slug` = 'laboriosam-expedita-ipsum-quos-accusantium-qui-quo') ORDER BY `created_at` DESC
              
           
           $query->when($filters['author'] ?? false, fn ($query, $author) => 
           $query
                ->whereHas('author', fn($query) => 
                $query->where('username', $author)));
            
    }

///////////////////////////////////////////////////////////////////
    public function getRouteKeyName()
    {
        return 'slug'; // TODO: Change the autogenerated stub
    }

    //hasOne, hasMany, belongsTo, belongsToMany
///////////////////////////////////////////////////////////////////
    public function category()
    {

        return $this->belongsTo(Category::class);
    }
////////////////////////////////////////////////////////////////////
    public function author() //laravel assume foreignKey author_id
    {
        return $this->belongsTo(User::class,'user_id');
    }

////////////////////////////////////////////////////////////////////
    public function comments() 
    {
        return $this->hasMany(Comment::class);
    }


}
